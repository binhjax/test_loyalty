// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)


// BusinessABI is the input ABI used to generate the binding from.
const ContractsABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"wallet_code\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"wallet_type\",\"type\":\"int8\"}],\"name\":\"event_createStash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txRef\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"wallet_code\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"event_credit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txRef\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"wallet_code\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"event_debit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"wallet_code\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"old_wallet_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"new_wallet_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"wallet_type\",\"type\":\"int8\"}],\"name\":\"event_reCreateStash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"listAcc\",\"type\":\"address[]\"}],\"name\":\"event_registerAccETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"wallet_code\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"stashState\",\"type\":\"int8\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"oldState\",\"type\":\"int256\"}],\"name\":\"event_setState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txRef\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"txType\",\"type\":\"int8\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"sender_bal\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"receiver_bal\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"event_transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnerAllStash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_stashName\",\"type\":\"bytes32\"},{\"internalType\":\"int8\",\"name\":\"_typeState\",\"type\":\"int8\"}],\"name\":\"createStash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txRef\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_stashName\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"}],\"name\":\"credit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creditIdx\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"credits\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txRef\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stashName\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txRef\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_stashName\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"}],\"name\":\"debit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"debitIdx\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"debits\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txRef\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stashName\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_stashName\",\"type\":\"bytes32\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreditHistoryLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebitHistoryLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMemberApiIdxLenght\",\"outputs\":[{\"internalType\":\"int16\",\"name\":\"\",\"type\":\"int16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistedAccEthLength\",\"outputs\":[{\"internalType\":\"int16\",\"name\":\"\",\"type\":\"int16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStashNamesLenght\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_stashName\",\"type\":\"bytes32\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransferHistoryLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_stashName\",\"type\":\"bytes32\"}],\"name\":\"getType\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_stashName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_stash\",\"type\":\"address\"}],\"name\":\"loadStashRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_stashName\",\"type\":\"bytes32\"},{\"internalType\":\"int8\",\"name\":\"_typeState\",\"type\":\"int8\"}],\"name\":\"reCreateStash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_listAcc\",\"type\":\"address[]\"}],\"name\":\"registerAccETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMember\",\"type\":\"address\"}],\"name\":\"registerMemberApi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_stashName\",\"type\":\"bytes32\"},{\"internalType\":\"int8\",\"name\":\"_stashState\",\"type\":\"int8\"}],\"name\":\"setState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stashNames\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"stashRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"string_tobytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txRef\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_receiver\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"_note\",\"type\":\"string\"},{\"internalType\":\"int8\",\"name\":\"_txType\",\"type\":\"int8\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"sender_bal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"receiver_bal\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferIdx\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transfers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txRef\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"},{\"internalType\":\"int8\",\"name\":\"txType\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// BusinessBin is the compiled bytecode used for deploying new contracts.
const ContractsBin = `0x608060405234801561001057600080fd5b50600080546001600160a01b0319908116339081178216178083556001600160a01b0390811683526001602081905260408420805460ff19168217905583546002805492830181559094527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180549092169216919091179055612ce7806100996000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80638d7a194a11610104578063c83fe142116100a2578063e45ab73311610071578063e45ab7331461082d578063eae5180e14610835578063ee9a58121461085b578063fb6cb61f14610863576101da565b8063c83fe14214610744578063d236e1ba14610761578063df64661214610769578063e1b8ff831461078a576101da565b8063a4642866116100de578063a464286614610500578063a6f9dae1146105da578063b91f176e14610600578063bc6d057714610629576101da565b80638d7a194a146104be5780638e739461146104c6578063a2cffc96146104e3576101da565b8063429979131161017c5780637e53308a1161014b5780637e53308a146104315780637f2aeea414610457578063893d20e8146104745780638b356a4d14610498576101da565b8063429979131461037c5780634e3d7de0146103bf5780634ea679e7146103eb578063735677c814610414576101da565b80631d74f2e2116101b85780631d74f2e21461026c5780631e022e7514610274578063203aa89c1461029a5780633c64f04b146102b7576101da565b806309648a9d146101df5780630ae94616146102155780630d3b2b6f14610244575b600080fd5b6101fc600480360360208110156101f557600080fd5b5035610880565b60408051600092830b90920b8252519081900360200190f35b6102326004803603602081101561022b57600080fd5b503561095c565b60408051918252519081900360200190f35b61026a6004803603602081101561025a57600080fd5b50356001600160a01b031661097a565b005b610232610a2c565b61026a6004803603604081101561028a57600080fd5b508035906020013560000b610a33565b610232600480360360208110156102b057600080fd5b5035610c8d565b6102d4600480360360208110156102cd57600080fd5b5035610c9a565b60405180888152602001878152602001868152602001858152602001806020018460000b60000b8152602001838152602001828103825285818151815260200191508051906020019080838360005b8381101561033b578181015183820152602001610323565b50505050905090810190601f1680156103685780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b6103996004803603602081101561039257600080fd5b5035610d78565b604080519485526020850193909352838301919091526060830152519081900360800190f35b61026a600480360360408110156103d557600080fd5b50803590602001356001600160a01b0316610d9f565b61026a6004803603606081101561040157600080fd5b5080359060208101359060400135610e46565b6102326004803603602081101561042a57600080fd5b5035611118565b61026a6004803603604081101561044757600080fd5b508035906020013560000b611125565b6101fc6004803603602081101561046d57600080fd5b50356112b9565b61047c611361565b604080516001600160a01b039092168252519081900360200190f35b61026a600480360360408110156104ae57600080fd5b508035906020013560000b611370565b610232611544565b610232600480360360208110156104dc57600080fd5b503561154a565b610399600480360360208110156104f957600080fd5b50356115ef565b6105c1600480360360c081101561051657600080fd5b81359160208101359160408201359160608101359181019060a08101608082013564010000000081111561054957600080fd5b82018360208201111561055b57600080fd5b8035906020019184600183028401116401000000008311171561057d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093965050509135900b91506116169050565b6040805192835260208301919091528051918290030190f35b61026a600480360360208110156105f057600080fd5b50356001600160a01b0316611f39565b61026a6004803603606081101561061657600080fd5b5080359060208101359060400135611fa9565b6106cf6004803603602081101561063f57600080fd5b81019060208101813564010000000081111561065a57600080fd5b82018360208201111561066c57600080fd5b8035906020019184600183028401116401000000008311171561068e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610a30945050505050565b6040805160208082528351818301528351919283929083019185019080838360005b838110156107095781810151838201526020016106f1565b50505050905090810190601f1680156107365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102326004803603602081101561075a57600080fd5b503561227b565b610232612288565b61077161228e565b60408051600192830b90920b8252519081900360200190f35b61026a600480360360208110156107a057600080fd5b8101906020810181356401000000008111156107bb57600080fd5b8201836020820111156107cd57600080fd5b803590602001918460208302840111640100000000831117156107ef57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061229d945050505050565b61077161238f565b61026a6004803603602081101561084b57600080fd5b50356001600160a01b0316612395565b61023261248c565b61047c6004803603602081101561087957600080fd5b5035612492565b60008181526003602052604081205481906001600160a01b03166108d9576040805162461bcd60e51b81526020600482015260176024820152600080516020612b9a833981519152604482015290519081900360640190fd5b600083815260036020908152604091829020548251631865c57d60e01b815292516001600160a01b03909116928392631865c57d92600480840193829003018186803b15801561092857600080fd5b505afa15801561093c573d6000803e3d6000fd5b505050506040513d602081101561095257600080fd5b5051949350505050565b6004818154811061096957fe5b600091825260209091200154905081565b3360009081526001602052604090205460ff166109c85760405162461bcd60e51b815260040180806020018281038252602b815260200180612c87602b913960400191505060405180910390fd5b6001600160a01b031660008181526001602081905260408220805460ff1916821790556002805491820181559091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319169091179055565b6007545b90565b3360009081526001602052604090205460ff16610a815760405162461bcd60e51b815260040180806020018281038252602b815260200180612c87602b913960400191505060405180910390fd5b6000828152600360205260409020546001600160a01b0316610ae3576040805162461bcd60e51b8152602060048201526016602482015275544149204b484f414e204348554120544f4e2054414960501b604482015290519081900360640190fd5b600082815260036020908152604091829020548251631865c57d60e01b815292516001600160a01b03909116928392631865c57d92600480840193829003018186803b158015610b3257600080fd5b505afa158015610b46573d6000803e3d6000fd5b505050506040513d6020811015610b5c57600080fd5b505160000b600314610b9f5760405162461bcd60e51b815260040180806020018281038252602f815260200180612c58602f913960400191505060405180910390fd5b60008383604051610baf906124ad565b918252600090810b810b60208301526040805192839003019190f080158015610bdc573d6000803e3d6000fd5b50600085815260036020908152604080832080546001600160a01b038087166001600160a01b03199092168217909255600480546001810182559086527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018a9055825191881682529281019290925286830b90920b81830152905191925085917f8c8e3419f9e71366ada9d23ae8a8dba5229a20e91deb3cab00f419ea5b0480e89181900360600190a250505050565b6005818154811061096957fe5b600a602052806000526040600020600091509050806000015490806001015490806002015490806003015490806004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d5e5780601f10610d3357610100808354040283529160200191610d5e565b820191906000526020600020905b815481529060010190602001808311610d4157829003601f168201915b505050506005830154600690930154919260000b91905087565b60086020526000908152604090208054600182015460028301546003909301549192909184565b6000546001600160a01b03163314610de85760405162461bcd60e51b8152600401808060200182810382526023815260200180612c0b6023913960400191505060405180910390fd5b600082815260036020526040812080546001600160a01b0319166001600160a01b0393909316929092179091556004805460018101825591527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0155565b3360009081526001602052604090205460ff16610e945760405162461bcd60e51b815260040180806020018281038252602b815260200180612c87602b913960400191505060405180910390fd5b60008281526003602052604090205482906001600160a01b0316610eed576040805162461bcd60e51b81526020600482015260176024820152600080516020612b9a833981519152604482015290519081900360640190fd5b600083815260036020908152604091829020548251631865c57d60e01b815292516001600160a01b03909116928392631865c57d92600480840193829003018186803b158015610f3c57600080fd5b505afa158015610f50573d6000803e3d6000fd5b505050506040513d6020811015610f6657600080fd5b505160000b60011480610fe05750806001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fad57600080fd5b505afa158015610fc1573d6000803e3d6000fd5b505050506040513d6020811015610fd757600080fd5b505160000b6002145b61101b5760405162461bcd60e51b8152600401808060200182810382526025815260200180612be66025913960400191505060405180910390fd5b806001600160a01b0316638c1fdf82846040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561106157600080fd5b505af1158015611075573d6000803e3d6000fd5b50506005805460018181019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0018890556000888152600660209081526040918290208a81559283018990556002830188905542600390930183905581518881529081019290925280518894508993507f3e888fb580f7ba504d1d06b6af38e430c683d120af553208a48629dbd58bb0f89281900390910190a35050505050565b6007818154811061096957fe5b3360009081526001602052604090205460ff166111735760405162461bcd60e51b815260040180806020018281038252602b815260200180612c87602b913960400191505060405180910390fd5b6000828152600360205260409020546001600160a01b0316156111d4576040805162461bcd60e51b8152602060048201526014602482015273544149204b484f414e20444120544f4e2054414960601b604482015290519081900360640190fd5b600082826040516111e4906124ad565b918252600090810b810b60208301526040805192839003019190f080158015611211573d6000803e3d6000fd5b50600084815260036020908152604080832080546001600160a01b0319166001600160a01b038616908117909155600480546001810182559085527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01889055815190815286840b90930b91830191909152805192935085927f0cb60d28f723451a1bd65a935f5e1d7b4e708818cf6cc6c30ad742fd67531b009281900390910190a2505050565b60008181526003602052604081205481906001600160a01b0316611312576040805162461bcd60e51b81526020600482015260176024820152600080516020612b9a833981519152604482015290519081900360640190fd5b600083815260036020908152604091829020548251630aed701f60e11b815292516001600160a01b039091169283926315dae03e92600480840193829003018186803b15801561092857600080fd5b6000546001600160a01b031690565b3360009081526001602052604090205460ff166113be5760405162461bcd60e51b815260040180806020018281038252602b815260200180612c87602b913960400191505060405180910390fd5b60008281526003602052604090205482906001600160a01b0316611417576040805162461bcd60e51b81526020600482015260176024820152600080516020612b9a833981519152604482015290519081900360640190fd5b6000838152600360209081526040808320548151631865c57d60e01b815291516001600160a01b0390911693928492631865c57d9260048083019392829003018186803b15801561146757600080fd5b505afa15801561147b573d6000803e3d6000fd5b505050506040513d602081101561149157600080fd5b505160408051631fed9efb60e01b8152600087810b810b600483015291519293506001600160a01b03851692631fed9efb9260248084019391929182900301818387803b1580156114e157600080fd5b505af11580156114f5573d6000803e3d6000fd5b505060408051600088810b810b825285900b602082015281518994507f787d29ad64e9e02e1fb29fb54868408884d3969457c61da4943ec8d57e8ac01193509081900390910190a25050505050565b60055490565b6000818152600360205260408120546001600160a01b03166115a1576040805162461bcd60e51b81526020600482015260176024820152600080516020612b9a833981519152604482015290519081900360640190fd5b6000828152600360209081526040808320548151629032ff60e51b815291516001600160a01b039091169283926312065fe09260048083019392829003018186803b15801561092857600080fd5b60066020526000908152604090208054600182015460028301546003909301549192909184565b33600090815260016020526040812054819060ff166116665760405162461bcd60e51b815260040180806020018281038252602b815260200180612c87602b913960400191505060405180910390fd5b60008512156116b1576040805162461bcd60e51b815260206004820152601260248201527105945552043415520414d4f554e54203e20360741b604482015290519081900360640190fd5b6000878152600360205260409020546001600160a01b031661171a576040805162461bcd60e51b815260206004820152601e60248201527f544149204b484f414e2043485559454e204b484f4e4720544f4e205441490000604482015290519081900360640190fd5b6000868152600360205260409020546001600160a01b0316611783576040805162461bcd60e51b815260206004820152601c60248201527f544149204b484f414e204e48414e204b484f4e4720544f4e2054414900000000604482015290519081900360640190fd5b600087815260036020908152604091829020548251631865c57d60e01b815292516001600160a01b03909116928392631865c57d92600480840193829003018186803b1580156117d257600080fd5b505afa1580156117e6573d6000803e3d6000fd5b505050506040513d60208110156117fc57600080fd5b505160000b600114806118765750806001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561184357600080fd5b505afa158015611857573d6000803e3d6000fd5b505050506040513d602081101561186d57600080fd5b505160000b6002145b6118b15760405162461bcd60e51b815260040180806020018281038252602c815260200180612bba602c913960400191505060405180910390fd5b85816001600160a01b03166312065fe06040518163ffffffff1660e01b815260040160206040518083038186803b1580156118eb57600080fd5b505afa1580156118ff573d6000803e3d6000fd5b505050506040513d602081101561191557600080fd5b50511215611962576040805162461bcd60e51b815260206004820152601560248201527429a790222a9025a427a72390222a9021a42aaca2a760591b604482015290519081900360640190fd5b806001600160a01b03166315dae03e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561199b57600080fd5b505afa1580156119af573d6000803e3d6000fd5b505050506040513d60208110156119c557600080fd5b505160000b600114611a1e576040805162461bcd60e51b815260206004820181905260248201527f5945552043415520544149204b484f414e2050484149204c41204c4f41492056604482015290519081900360640190fd5b600087815260036020908152604091829020548251631865c57d60e01b815292516001600160a01b03909116928392631865c57d92600480840193829003018186803b158015611a6d57600080fd5b505afa158015611a81573d6000803e3d6000fd5b505050506040513d6020811015611a9757600080fd5b505160000b60011480611b115750806001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ade57600080fd5b505afa158015611af2573d6000803e3d6000fd5b505050506040513d6020811015611b0857600080fd5b505160000b6002145b611b4c5760405162461bcd60e51b815260040180806020018281038252602a815260200180612c2e602a913960400191505060405180910390fd5b816001600160a01b0316638c1fdf82886040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611b9257600080fd5b505af1158015611ba6573d6000803e3d6000fd5b50505050806001600160a01b03166304d4f624886040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611bf057600080fd5b505af1158015611c04573d6000803e3d6000fd5b50506009805460018181019092557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af018d905560008d8152600a602090815260409091208e81559182018d9055600282018c9055600382018b90558951611c759450600490920192508901906124ba565b5060008a8152600a60209081526040808320600581018054948a900b60ff1660ff1990951694909417909355426006909301929092558151629032ff60e51b815291518a928c928e927f20244c6c280a8d1e1be518a3fc3acb8c46f303ad98dd9ec4c01baf9e2999f82e928d928d928d926001600160a01b038c16926312065fe092600480840193829003018186803b158015611d1157600080fd5b505afa158015611d25573d6000803e3d6000fd5b505050506040513d6020811015611d3b57600080fd5b505160408051629032ff60e51b815290516001600160a01b038b16916312065fe0916004808301926020929190829003018186803b158015611d7c57600080fd5b505afa158015611d90573d6000803e3d6000fd5b505050506040513d6020811015611da657600080fd5b81019080805190602001909291905050504260405180878152602001806020018660000b60000b8152602001858152602001848152602001838152602001828103825287818151815260200191508051906020019080838360005b83811015611e19578181015183820152602001611e01565b50505050905090810190601f168015611e465780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a4816001600160a01b03166312065fe06040518163ffffffff1660e01b815260040160206040518083038186803b158015611e9157600080fd5b505afa158015611ea5573d6000803e3d6000fd5b505050506040513d6020811015611ebb57600080fd5b505160408051629032ff60e51b815290516001600160a01b038416916312065fe0916004808301926020929190829003018186803b158015611efc57600080fd5b505afa158015611f10573d6000803e3d6000fd5b505050506040513d6020811015611f2657600080fd5b5051909b909a5098505050505050505050565b3360009081526001602052604090205460ff16611f875760405162461bcd60e51b815260040180806020018281038252602b815260200180612c87602b913960400191505060405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526001602052604090205460ff16611ff75760405162461bcd60e51b815260040180806020018281038252602b815260200180612c87602b913960400191505060405180910390fd5b60008281526003602052604090205482906001600160a01b0316612050576040805162461bcd60e51b81526020600482015260176024820152600080516020612b9a833981519152604482015290519081900360640190fd5b600083815260036020908152604091829020548251631865c57d60e01b815292516001600160a01b03909116928392631865c57d92600480840193829003018186803b15801561209f57600080fd5b505afa1580156120b3573d6000803e3d6000fd5b505050506040513d60208110156120c957600080fd5b505160000b600114806121435750806001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561211057600080fd5b505afa158015612124573d6000803e3d6000fd5b505050506040513d602081101561213a57600080fd5b505160000b6002145b61217e5760405162461bcd60e51b8152600401808060200182810382526025815260200180612be66025913960400191505060405180910390fd5b806001600160a01b03166304d4f624846040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156121c457600080fd5b505af11580156121d8573d6000803e3d6000fd5b50506007805460018181019092557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688018890556000888152600860209081526040918290208a81559283018990556002830188905542600390930183905581518881529081019290925280518894508993507f2bda1f3aff897895cbea7f906b2e41ef99d39163a7b36af5782b8b718ed7e4569281900390910190a35050505050565b6009818154811061096957fe5b60095490565b600061229861238f565b905090565b6000546001600160a01b031633146122e65760405162461bcd60e51b8152600401808060200182810382526023815260200180612c0b6023913960400191505060405180910390fd5b60005b81518110156123165761230e82828151811061230157fe5b602002602001015161097a565b6001016122e9565b507f3b0686a3c64982476da002e36939997a11d9ef748420920b111c3ba5d2e9784f816040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015612379578181015183820152602001612361565b505050509050019250505060405180910390a150565b60025490565b6000546001600160a01b031633146123de5760405162461bcd60e51b8152600401808060200182810382526023815260200180612c0b6023913960400191505060405180910390fd5b60005b60045481101561248857600060036000600484815481106123fe57fe5b600091825260208083209091015483528201929092526040908101822054815163a6f9dae160e01b81526001600160a01b0387811660048301529251929091169350839263a6f9dae19260248084019382900301818387803b15801561246357600080fd5b505af1158015612477573d6000803e3d6000fd5b5050600190930192506123e1915050565b5050565b60045490565b6003602052600090815260409020546001600160a01b031681565b6106478061255383390190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106124fb57805160ff1916838001178555612528565b82800160010185558215612528579182015b8281111561252857825182559160200191906001019061250d565b50612534929150612538565b5090565b610a3091905b80821115612534576000815560010161253e56fe608060405234801561001057600080fd5b506040516106473803806106478339818101604052604081101561003357600080fd5b508051602090910151600080546001600160a01b03191633178155600392909255600580549190920b60ff166101000261ff00199091161790556105cb8061007c6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063624cd31711610071578063624cd3171461016157806369c8374314610181578063893d20e81461019e5780638c1fdf82146101c2578063a6f9dae1146101df578063e45ab73314610205576100b4565b806304d4f624146100b95780630d3b2b6f146100d857806312065fe0146100fe57806315dae03e146101185780631865c57d146101395780631fed9efb14610141575b600080fd5b6100d6600480360360208110156100cf57600080fd5b5035610226565b005b6100d6600480360360208110156100ee57600080fd5b50356001600160a01b031661027a565b61010661032c565b60408051918252519081900360200190f35b610120610332565b60408051600092830b90920b8252519081900360200190f35b610120610340565b6100d66004803603602081101561015757600080fd5b503560000b610349565b6100d66004803603602081101561017757600080fd5b503560000b6103ad565b6100d66004803603602081101561019757600080fd5b5035610416565b6101a661046b565b604080516001600160a01b039092168252519081900360200190f35b6100d6600480360360208110156101d857600080fd5b503561047a565b6100d6600480360360208110156101f557600080fd5b50356001600160a01b03166104d1565b61020d610541565b60408051600192830b90920b8252519081900360200190f35b6000546001600160a01b0316331461026f5760405162461bcd60e51b81526004018080602001828103825260238152602001806105486023913960400191505060405180910390fd5b600480549091019055565b3360009081526001602052604090205460ff166102c85760405162461bcd60e51b815260040180806020018281038252602b81526020018061056b602b913960400191505060405180910390fd5b6001600160a01b031660008181526001602081905260408220805460ff1916821790556002805491820181559091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319169091179055565b60045490565b600554610100900460000b90565b60055460000b90565b6000546001600160a01b031633146103925760405162461bcd60e51b81526004018080602001828103825260238152602001806105486023913960400191505060405180910390fd5b6005805460009290920b60ff1660ff19909216919091179055565b6000546001600160a01b031633146103f65760405162461bcd60e51b81526004018080602001828103825260238152602001806105486023913960400191505060405180910390fd5b6005805460009290920b60ff166101000261ff0019909216919091179055565b6000546001600160a01b0316331461045f5760405162461bcd60e51b81526004018080602001828103825260238152602001806105486023913960400191505060405180910390fd5b60048054919091039055565b6000546001600160a01b031690565b6000546001600160a01b031633146104c35760405162461bcd60e51b81526004018080602001828103825260238152602001806105486023913960400191505060405180910390fd5b600454811261045f57600080fd5b3360009081526001602052604090205460ff1661051f5760405162461bcd60e51b815260040180806020018281038252602b81526020018061056b602b913960400191505060405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6002549056fe434849204f574e455220434f4e5452414354204d4f492044554f4320474f492048414d4348492043414320414343204554482044412044414e47204b59204d4f4920474f492044554f432048414da26469706673582212201b6985826607e52865d149358ce4cade4009b38e74ca570117b9898061246a6b64736f6c63430006040033544149204b484f414e204b484f4e4720544f4e205441490000000000000000005945552043415520544149204b484f414e2043485559454e204f205452414e472054484149204143544956455945552043415520544149204b484f414e204f205452414e47205448414920414354495645434849204f574e455220434f4e5452414354204d4f492044554f4320474f492048414d5945552043415520544149204b484f414e204e48414e204f205452414e47205448414920414354495645544149204b484f414e204d554f4e2054414f204c41492050484149204f205452414e47205448414920434c4f5345444348492043414320414343204554482044412044414e47204b59204d4f4920474f492044554f432048414da2646970667358221220044e632d817747ab6599b7e2cb3b4302ebd48132c6112ee8af249a7ca86aae7b64736f6c63430006040033`

// Contracts is an auto generated Go binding around an Ethereum contract.
type Contracts struct {
	ContractsCaller     // Read-only binding to the contract
	ContractsTransactor // Write-only binding to the contract
	ContractsFilterer   // Log filterer for contract events
}

// ContractsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractsSession struct {
	Contract     *Contracts        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractsCallerSession struct {
	Contract *ContractsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ContractsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractsTransactorSession struct {
	Contract     *ContractsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ContractsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractsRaw struct {
	Contract *Contracts // Generic contract binding to access the raw methods on
}

// ContractsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractsCallerRaw struct {
	Contract *ContractsCaller // Generic read-only contract binding to access the raw methods on
}

// ContractsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractsTransactorRaw struct {
	Contract *ContractsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContracts creates a new instance of Contracts, bound to a specific deployed contract.
func NewContracts(address common.Address, backend bind.ContractBackend) (*Contracts, error) {
	contract, err := bindContracts(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contracts{ContractsCaller: ContractsCaller{contract: contract}, ContractsTransactor: ContractsTransactor{contract: contract}, ContractsFilterer: ContractsFilterer{contract: contract}}, nil
}

// NewContractsCaller creates a new read-only instance of Contracts, bound to a specific deployed contract.
func NewContractsCaller(address common.Address, caller bind.ContractCaller) (*ContractsCaller, error) {
	contract, err := bindContracts(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsCaller{contract: contract}, nil
}

// NewContractsTransactor creates a new write-only instance of Contracts, bound to a specific deployed contract.
func NewContractsTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractsTransactor, error) {
	contract, err := bindContracts(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractsTransactor{contract: contract}, nil
}

// NewContractsFilterer creates a new log filterer instance of Contracts, bound to a specific deployed contract.
func NewContractsFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractsFilterer, error) {
	contract, err := bindContracts(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractsFilterer{contract: contract}, nil
}

// bindContracts binds a generic wrapper to an already deployed contract.
func bindContracts(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContractsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contracts *ContractsRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Contracts.Contract.ContractsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contracts *ContractsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.Contract.ContractsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contracts *ContractsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contracts.Contract.ContractsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contracts *ContractsCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Contracts.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contracts *ContractsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contracts.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contracts *ContractsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contracts.Contract.contract.Transact(opts, method, params...)
}

// CreditIdx is a free data retrieval call binding the contract method 0x735677c8.
//
// Solidity: function creditIdx(uint256 ) constant returns(bytes32)
func (_Contracts *ContractsCaller) CreditIdx(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Contracts.contract.Call(opts, out, "creditIdx", arg0)
	return *ret0, err
}

// CreditIdx is a free data retrieval call binding the contract method 0x735677c8.
//
// Solidity: function creditIdx(uint256 ) constant returns(bytes32)
func (_Contracts *ContractsSession) CreditIdx(arg0 *big.Int) ([32]byte, error) {
	return _Contracts.Contract.CreditIdx(&_Contracts.CallOpts, arg0)
}

// CreditIdx is a free data retrieval call binding the contract method 0x735677c8.
//
// Solidity: function creditIdx(uint256 ) constant returns(bytes32)
func (_Contracts *ContractsCallerSession) CreditIdx(arg0 *big.Int) ([32]byte, error) {
	return _Contracts.Contract.CreditIdx(&_Contracts.CallOpts, arg0)
}

// Credits is a free data retrieval call binding the contract method 0x42997913.
//
// Solidity: function credits(bytes32 ) constant returns(bytes32 txRef, bytes32 stashName, int256 amount, uint256 timestamp)
func (_Contracts *ContractsCaller) Credits(opts *bind.CallOpts, arg0 [32]byte) (struct {
	TxRef     [32]byte
	StashName [32]byte
	Amount    *big.Int
	Timestamp *big.Int
}, error) {
	ret := new(struct {
		TxRef     [32]byte
		StashName [32]byte
		Amount    *big.Int
		Timestamp *big.Int
	})
	out := ret
	err := _Contracts.contract.Call(opts, out, "credits", arg0)
	return *ret, err
}

// Credits is a free data retrieval call binding the contract method 0x42997913.
//
// Solidity: function credits(bytes32 ) constant returns(bytes32 txRef, bytes32 stashName, int256 amount, uint256 timestamp)
func (_Contracts *ContractsSession) Credits(arg0 [32]byte) (struct {
	TxRef     [32]byte
	StashName [32]byte
	Amount    *big.Int
	Timestamp *big.Int
}, error) {
	return _Contracts.Contract.Credits(&_Contracts.CallOpts, arg0)
}

// Credits is a free data retrieval call binding the contract method 0x42997913.
//
// Solidity: function credits(bytes32 ) constant returns(bytes32 txRef, bytes32 stashName, int256 amount, uint256 timestamp)
func (_Contracts *ContractsCallerSession) Credits(arg0 [32]byte) (struct {
	TxRef     [32]byte
	StashName [32]byte
	Amount    *big.Int
	Timestamp *big.Int
}, error) {
	return _Contracts.Contract.Credits(&_Contracts.CallOpts, arg0)
}

// DebitIdx is a free data retrieval call binding the contract method 0x203aa89c.
//
// Solidity: function debitIdx(uint256 ) constant returns(bytes32)
func (_Contracts *ContractsCaller) DebitIdx(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Contracts.contract.Call(opts, out, "debitIdx", arg0)
	return *ret0, err
}

// DebitIdx is a free data retrieval call binding the contract method 0x203aa89c.
//
// Solidity: function debitIdx(uint256 ) constant returns(bytes32)
func (_Contracts *ContractsSession) DebitIdx(arg0 *big.Int) ([32]byte, error) {
	return _Contracts.Contract.DebitIdx(&_Contracts.CallOpts, arg0)
}

// DebitIdx is a free data retrieval call binding the contract method 0x203aa89c.
//
// Solidity: function debitIdx(uint256 ) constant returns(bytes32)
func (_Contracts *ContractsCallerSession) DebitIdx(arg0 *big.Int) ([32]byte, error) {
	return _Contracts.Contract.DebitIdx(&_Contracts.CallOpts, arg0)
}

// Debits is a free data retrieval call binding the contract method 0xa2cffc96.
//
// Solidity: function debits(bytes32 ) constant returns(bytes32 txRef, bytes32 stashName, int256 amount, uint256 timestamp)
func (_Contracts *ContractsCaller) Debits(opts *bind.CallOpts, arg0 [32]byte) (struct {
	TxRef     [32]byte
	StashName [32]byte
	Amount    *big.Int
	Timestamp *big.Int
}, error) {
	ret := new(struct {
		TxRef     [32]byte
		StashName [32]byte
		Amount    *big.Int
		Timestamp *big.Int
	})
	out := ret
	err := _Contracts.contract.Call(opts, out, "debits", arg0)
	return *ret, err
}

// Debits is a free data retrieval call binding the contract method 0xa2cffc96.
//
// Solidity: function debits(bytes32 ) constant returns(bytes32 txRef, bytes32 stashName, int256 amount, uint256 timestamp)
func (_Contracts *ContractsSession) Debits(arg0 [32]byte) (struct {
	TxRef     [32]byte
	StashName [32]byte
	Amount    *big.Int
	Timestamp *big.Int
}, error) {
	return _Contracts.Contract.Debits(&_Contracts.CallOpts, arg0)
}

// Debits is a free data retrieval call binding the contract method 0xa2cffc96.
//
// Solidity: function debits(bytes32 ) constant returns(bytes32 txRef, bytes32 stashName, int256 amount, uint256 timestamp)
func (_Contracts *ContractsCallerSession) Debits(arg0 [32]byte) (struct {
	TxRef     [32]byte
	StashName [32]byte
	Amount    *big.Int
	Timestamp *big.Int
}, error) {
	return _Contracts.Contract.Debits(&_Contracts.CallOpts, arg0)
}

// GetBalance is a free data retrieval call binding the contract method 0x8e739461.
//
// Solidity: function getBalance(bytes32 _stashName) constant returns(int256)
func (_Contracts *ContractsCaller) GetBalance(opts *bind.CallOpts, _stashName [32]byte) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Contracts.contract.Call(opts, out, "getBalance", _stashName)
	return *ret0, err
}

// GetBalance is a free data retrieval call binding the contract method 0x8e739461.
//
// Solidity: function getBalance(bytes32 _stashName) constant returns(int256)
func (_Contracts *ContractsSession) GetBalance(_stashName [32]byte) (*big.Int, error) {
	return _Contracts.Contract.GetBalance(&_Contracts.CallOpts, _stashName)
}

// GetBalance is a free data retrieval call binding the contract method 0x8e739461.
//
// Solidity: function getBalance(bytes32 _stashName) constant returns(int256)
func (_Contracts *ContractsCallerSession) GetBalance(_stashName [32]byte) (*big.Int, error) {
	return _Contracts.Contract.GetBalance(&_Contracts.CallOpts, _stashName)
}

// GetCreditHistoryLength is a free data retrieval call binding the contract method 0x1d74f2e2.
//
// Solidity: function getCreditHistoryLength() constant returns(uint256)
func (_Contracts *ContractsCaller) GetCreditHistoryLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Contracts.contract.Call(opts, out, "getCreditHistoryLength")
	return *ret0, err
}

// GetCreditHistoryLength is a free data retrieval call binding the contract method 0x1d74f2e2.
//
// Solidity: function getCreditHistoryLength() constant returns(uint256)
func (_Contracts *ContractsSession) GetCreditHistoryLength() (*big.Int, error) {
	return _Contracts.Contract.GetCreditHistoryLength(&_Contracts.CallOpts)
}

// GetCreditHistoryLength is a free data retrieval call binding the contract method 0x1d74f2e2.
//
// Solidity: function getCreditHistoryLength() constant returns(uint256)
func (_Contracts *ContractsCallerSession) GetCreditHistoryLength() (*big.Int, error) {
	return _Contracts.Contract.GetCreditHistoryLength(&_Contracts.CallOpts)
}

// GetDebitHistoryLength is a free data retrieval call binding the contract method 0x8d7a194a.
//
// Solidity: function getDebitHistoryLength() constant returns(uint256)
func (_Contracts *ContractsCaller) GetDebitHistoryLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Contracts.contract.Call(opts, out, "getDebitHistoryLength")
	return *ret0, err
}

// GetDebitHistoryLength is a free data retrieval call binding the contract method 0x8d7a194a.
//
// Solidity: function getDebitHistoryLength() constant returns(uint256)
func (_Contracts *ContractsSession) GetDebitHistoryLength() (*big.Int, error) {
	return _Contracts.Contract.GetDebitHistoryLength(&_Contracts.CallOpts)
}

// GetDebitHistoryLength is a free data retrieval call binding the contract method 0x8d7a194a.
//
// Solidity: function getDebitHistoryLength() constant returns(uint256)
func (_Contracts *ContractsCallerSession) GetDebitHistoryLength() (*big.Int, error) {
	return _Contracts.Contract.GetDebitHistoryLength(&_Contracts.CallOpts)
}

// GetMemberApiIdxLenght is a free data retrieval call binding the contract method 0xe45ab733.
//
// Solidity: function getMemberApiIdxLenght() constant returns(int16)
func (_Contracts *ContractsCaller) GetMemberApiIdxLenght(opts *bind.CallOpts) (int16, error) {
	var (
		ret0 = new(int16)
	)
	out := ret0
	err := _Contracts.contract.Call(opts, out, "getMemberApiIdxLenght")
	return *ret0, err
}

// GetMemberApiIdxLenght is a free data retrieval call binding the contract method 0xe45ab733.
//
// Solidity: function getMemberApiIdxLenght() constant returns(int16)
func (_Contracts *ContractsSession) GetMemberApiIdxLenght() (int16, error) {
	return _Contracts.Contract.GetMemberApiIdxLenght(&_Contracts.CallOpts)
}

// GetMemberApiIdxLenght is a free data retrieval call binding the contract method 0xe45ab733.
//
// Solidity: function getMemberApiIdxLenght() constant returns(int16)
func (_Contracts *ContractsCallerSession) GetMemberApiIdxLenght() (int16, error) {
	return _Contracts.Contract.GetMemberApiIdxLenght(&_Contracts.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() constant returns(address)
func (_Contracts *ContractsCaller) GetOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Contracts.contract.Call(opts, out, "getOwner")
	return *ret0, err
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() constant returns(address)
func (_Contracts *ContractsSession) GetOwner() (common.Address, error) {
	return _Contracts.Contract.GetOwner(&_Contracts.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() constant returns(address)
func (_Contracts *ContractsCallerSession) GetOwner() (common.Address, error) {
	return _Contracts.Contract.GetOwner(&_Contracts.CallOpts)
}

// GetRegistedAccEthLength is a free data retrieval call binding the contract method 0xdf646612.
//
// Solidity: function getRegistedAccEthLength() constant returns(int16)
func (_Contracts *ContractsCaller) GetRegistedAccEthLength(opts *bind.CallOpts) (int16, error) {
	var (
		ret0 = new(int16)
	)
	out := ret0
	err := _Contracts.contract.Call(opts, out, "getRegistedAccEthLength")
	return *ret0, err
}

// GetRegistedAccEthLength is a free data retrieval call binding the contract method 0xdf646612.
//
// Solidity: function getRegistedAccEthLength() constant returns(int16)
func (_Contracts *ContractsSession) GetRegistedAccEthLength() (int16, error) {
	return _Contracts.Contract.GetRegistedAccEthLength(&_Contracts.CallOpts)
}

// GetRegistedAccEthLength is a free data retrieval call binding the contract method 0xdf646612.
//
// Solidity: function getRegistedAccEthLength() constant returns(int16)
func (_Contracts *ContractsCallerSession) GetRegistedAccEthLength() (int16, error) {
	return _Contracts.Contract.GetRegistedAccEthLength(&_Contracts.CallOpts)
}

// GetStashNamesLenght is a free data retrieval call binding the contract method 0xee9a5812.
//
// Solidity: function getStashNamesLenght() constant returns(int256)
func (_Contracts *ContractsCaller) GetStashNamesLenght(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Contracts.contract.Call(opts, out, "getStashNamesLenght")
	return *ret0, err
}

// GetStashNamesLenght is a free data retrieval call binding the contract method 0xee9a5812.
//
// Solidity: function getStashNamesLenght() constant returns(int256)
func (_Contracts *ContractsSession) GetStashNamesLenght() (*big.Int, error) {
	return _Contracts.Contract.GetStashNamesLenght(&_Contracts.CallOpts)
}

// GetStashNamesLenght is a free data retrieval call binding the contract method 0xee9a5812.
//
// Solidity: function getStashNamesLenght() constant returns(int256)
func (_Contracts *ContractsCallerSession) GetStashNamesLenght() (*big.Int, error) {
	return _Contracts.Contract.GetStashNamesLenght(&_Contracts.CallOpts)
}

// GetState is a free data retrieval call binding the contract method 0x09648a9d.
//
// Solidity: function getState(bytes32 _stashName) constant returns(int8)
func (_Contracts *ContractsCaller) GetState(opts *bind.CallOpts, _stashName [32]byte) (int8, error) {
	var (
		ret0 = new(int8)
	)
	out := ret0
	err := _Contracts.contract.Call(opts, out, "getState", _stashName)
	return *ret0, err
}

// GetState is a free data retrieval call binding the contract method 0x09648a9d.
//
// Solidity: function getState(bytes32 _stashName) constant returns(int8)
func (_Contracts *ContractsSession) GetState(_stashName [32]byte) (int8, error) {
	return _Contracts.Contract.GetState(&_Contracts.CallOpts, _stashName)
}

// GetState is a free data retrieval call binding the contract method 0x09648a9d.
//
// Solidity: function getState(bytes32 _stashName) constant returns(int8)
func (_Contracts *ContractsCallerSession) GetState(_stashName [32]byte) (int8, error) {
	return _Contracts.Contract.GetState(&_Contracts.CallOpts, _stashName)
}

// GetTransferHistoryLength is a free data retrieval call binding the contract method 0xd236e1ba.
//
// Solidity: function getTransferHistoryLength() constant returns(uint256)
func (_Contracts *ContractsCaller) GetTransferHistoryLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Contracts.contract.Call(opts, out, "getTransferHistoryLength")
	return *ret0, err
}

// GetTransferHistoryLength is a free data retrieval call binding the contract method 0xd236e1ba.
//
// Solidity: function getTransferHistoryLength() constant returns(uint256)
func (_Contracts *ContractsSession) GetTransferHistoryLength() (*big.Int, error) {
	return _Contracts.Contract.GetTransferHistoryLength(&_Contracts.CallOpts)
}

// GetTransferHistoryLength is a free data retrieval call binding the contract method 0xd236e1ba.
//
// Solidity: function getTransferHistoryLength() constant returns(uint256)
func (_Contracts *ContractsCallerSession) GetTransferHistoryLength() (*big.Int, error) {
	return _Contracts.Contract.GetTransferHistoryLength(&_Contracts.CallOpts)
}

// GetType is a free data retrieval call binding the contract method 0x7f2aeea4.
//
// Solidity: function getType(bytes32 _stashName) constant returns(int8)
func (_Contracts *ContractsCaller) GetType(opts *bind.CallOpts, _stashName [32]byte) (int8, error) {
	var (
		ret0 = new(int8)
	)
	out := ret0
	err := _Contracts.contract.Call(opts, out, "getType", _stashName)
	return *ret0, err
}

// GetType is a free data retrieval call binding the contract method 0x7f2aeea4.
//
// Solidity: function getType(bytes32 _stashName) constant returns(int8)
func (_Contracts *ContractsSession) GetType(_stashName [32]byte) (int8, error) {
	return _Contracts.Contract.GetType(&_Contracts.CallOpts, _stashName)
}

// GetType is a free data retrieval call binding the contract method 0x7f2aeea4.
//
// Solidity: function getType(bytes32 _stashName) constant returns(int8)
func (_Contracts *ContractsCallerSession) GetType(_stashName [32]byte) (int8, error) {
	return _Contracts.Contract.GetType(&_Contracts.CallOpts, _stashName)
}

// StashNames is a free data retrieval call binding the contract method 0x0ae94616.
//
// Solidity: function stashNames(uint256 ) constant returns(bytes32)
func (_Contracts *ContractsCaller) StashNames(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Contracts.contract.Call(opts, out, "stashNames", arg0)
	return *ret0, err
}

// StashNames is a free data retrieval call binding the contract method 0x0ae94616.
//
// Solidity: function stashNames(uint256 ) constant returns(bytes32)
func (_Contracts *ContractsSession) StashNames(arg0 *big.Int) ([32]byte, error) {
	return _Contracts.Contract.StashNames(&_Contracts.CallOpts, arg0)
}

// StashNames is a free data retrieval call binding the contract method 0x0ae94616.
//
// Solidity: function stashNames(uint256 ) constant returns(bytes32)
func (_Contracts *ContractsCallerSession) StashNames(arg0 *big.Int) ([32]byte, error) {
	return _Contracts.Contract.StashNames(&_Contracts.CallOpts, arg0)
}

// StashRegistry is a free data retrieval call binding the contract method 0xfb6cb61f.
//
// Solidity: function stashRegistry(bytes32 ) constant returns(address)
func (_Contracts *ContractsCaller) StashRegistry(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Contracts.contract.Call(opts, out, "stashRegistry", arg0)
	return *ret0, err
}

// StashRegistry is a free data retrieval call binding the contract method 0xfb6cb61f.
//
// Solidity: function stashRegistry(bytes32 ) constant returns(address)
func (_Contracts *ContractsSession) StashRegistry(arg0 [32]byte) (common.Address, error) {
	return _Contracts.Contract.StashRegistry(&_Contracts.CallOpts, arg0)
}

// StashRegistry is a free data retrieval call binding the contract method 0xfb6cb61f.
//
// Solidity: function stashRegistry(bytes32 ) constant returns(address)
func (_Contracts *ContractsCallerSession) StashRegistry(arg0 [32]byte) (common.Address, error) {
	return _Contracts.Contract.StashRegistry(&_Contracts.CallOpts, arg0)
}

// StringTobytes is a free data retrieval call binding the contract method 0xbc6d0577.
//
// Solidity: function string_tobytes(string s) constant returns(bytes)
func (_Contracts *ContractsCaller) StringTobytes(opts *bind.CallOpts, s string) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _Contracts.contract.Call(opts, out, "string_tobytes", s)
	return *ret0, err
}

// StringTobytes is a free data retrieval call binding the contract method 0xbc6d0577.
//
// Solidity: function string_tobytes(string s) constant returns(bytes)
func (_Contracts *ContractsSession) StringTobytes(s string) ([]byte, error) {
	return _Contracts.Contract.StringTobytes(&_Contracts.CallOpts, s)
}

// StringTobytes is a free data retrieval call binding the contract method 0xbc6d0577.
//
// Solidity: function string_tobytes(string s) constant returns(bytes)
func (_Contracts *ContractsCallerSession) StringTobytes(s string) ([]byte, error) {
	return _Contracts.Contract.StringTobytes(&_Contracts.CallOpts, s)
}

// TransferIdx is a free data retrieval call binding the contract method 0xc83fe142.
//
// Solidity: function transferIdx(uint256 ) constant returns(bytes32)
func (_Contracts *ContractsCaller) TransferIdx(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Contracts.contract.Call(opts, out, "transferIdx", arg0)
	return *ret0, err
}

// TransferIdx is a free data retrieval call binding the contract method 0xc83fe142.
//
// Solidity: function transferIdx(uint256 ) constant returns(bytes32)
func (_Contracts *ContractsSession) TransferIdx(arg0 *big.Int) ([32]byte, error) {
	return _Contracts.Contract.TransferIdx(&_Contracts.CallOpts, arg0)
}

// TransferIdx is a free data retrieval call binding the contract method 0xc83fe142.
//
// Solidity: function transferIdx(uint256 ) constant returns(bytes32)
func (_Contracts *ContractsCallerSession) TransferIdx(arg0 *big.Int) ([32]byte, error) {
	return _Contracts.Contract.TransferIdx(&_Contracts.CallOpts, arg0)
}

// Transfers is a free data retrieval call binding the contract method 0x3c64f04b.
//
// Solidity: function transfers(bytes32 ) constant returns(bytes32 txRef, bytes32 sender, bytes32 receiver, int256 amount, string note, int8 txType, uint256 timestamp)
func (_Contracts *ContractsCaller) Transfers(opts *bind.CallOpts, arg0 [32]byte) (struct {
	TxRef     [32]byte
	Sender    [32]byte
	Receiver  [32]byte
	Amount    *big.Int
	Note      string
	TxType    int8
	Timestamp *big.Int
}, error) {
	ret := new(struct {
		TxRef     [32]byte
		Sender    [32]byte
		Receiver  [32]byte
		Amount    *big.Int
		Note      string
		TxType    int8
		Timestamp *big.Int
	})
	out := ret
	err := _Contracts.contract.Call(opts, out, "transfers", arg0)
	return *ret, err
}

// Transfers is a free data retrieval call binding the contract method 0x3c64f04b.
//
// Solidity: function transfers(bytes32 ) constant returns(bytes32 txRef, bytes32 sender, bytes32 receiver, int256 amount, string note, int8 txType, uint256 timestamp)
func (_Contracts *ContractsSession) Transfers(arg0 [32]byte) (struct {
	TxRef     [32]byte
	Sender    [32]byte
	Receiver  [32]byte
	Amount    *big.Int
	Note      string
	TxType    int8
	Timestamp *big.Int
}, error) {
	return _Contracts.Contract.Transfers(&_Contracts.CallOpts, arg0)
}

// Transfers is a free data retrieval call binding the contract method 0x3c64f04b.
//
// Solidity: function transfers(bytes32 ) constant returns(bytes32 txRef, bytes32 sender, bytes32 receiver, int256 amount, string note, int8 txType, uint256 timestamp)
func (_Contracts *ContractsCallerSession) Transfers(arg0 [32]byte) (struct {
	TxRef     [32]byte
	Sender    [32]byte
	Receiver  [32]byte
	Amount    *big.Int
	Note      string
	TxType    int8
	Timestamp *big.Int
}, error) {
	return _Contracts.Contract.Transfers(&_Contracts.CallOpts, arg0)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_Contracts *ContractsTransactor) ChangeOwner(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "changeOwner", _newOwner)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_Contracts *ContractsSession) ChangeOwner(_newOwner common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.ChangeOwner(&_Contracts.TransactOpts, _newOwner)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_Contracts *ContractsTransactorSession) ChangeOwner(_newOwner common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.ChangeOwner(&_Contracts.TransactOpts, _newOwner)
}

// ChangeOwnerAllStash is a paid mutator transaction binding the contract method 0xeae5180e.
//
// Solidity: function changeOwnerAllStash(address _newOwner) returns()
func (_Contracts *ContractsTransactor) ChangeOwnerAllStash(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "changeOwnerAllStash", _newOwner)
}

// ChangeOwnerAllStash is a paid mutator transaction binding the contract method 0xeae5180e.
//
// Solidity: function changeOwnerAllStash(address _newOwner) returns()
func (_Contracts *ContractsSession) ChangeOwnerAllStash(_newOwner common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.ChangeOwnerAllStash(&_Contracts.TransactOpts, _newOwner)
}

// ChangeOwnerAllStash is a paid mutator transaction binding the contract method 0xeae5180e.
//
// Solidity: function changeOwnerAllStash(address _newOwner) returns()
func (_Contracts *ContractsTransactorSession) ChangeOwnerAllStash(_newOwner common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.ChangeOwnerAllStash(&_Contracts.TransactOpts, _newOwner)
}

// CreateStash is a paid mutator transaction binding the contract method 0x7e53308a.
//
// Solidity: function createStash(bytes32 _stashName, int8 _typeState) returns()
func (_Contracts *ContractsTransactor) CreateStash(opts *bind.TransactOpts, _stashName [32]byte, _typeState int8) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "createStash", _stashName, _typeState)
}

// CreateStash is a paid mutator transaction binding the contract method 0x7e53308a.
//
// Solidity: function createStash(bytes32 _stashName, int8 _typeState) returns()
func (_Contracts *ContractsSession) CreateStash(_stashName [32]byte, _typeState int8) (*types.Transaction, error) {
	return _Contracts.Contract.CreateStash(&_Contracts.TransactOpts, _stashName, _typeState)
}

// CreateStash is a paid mutator transaction binding the contract method 0x7e53308a.
//
// Solidity: function createStash(bytes32 _stashName, int8 _typeState) returns()
func (_Contracts *ContractsTransactorSession) CreateStash(_stashName [32]byte, _typeState int8) (*types.Transaction, error) {
	return _Contracts.Contract.CreateStash(&_Contracts.TransactOpts, _stashName, _typeState)
}

// Credit is a paid mutator transaction binding the contract method 0xb91f176e.
//
// Solidity: function credit(bytes32 _txRef, bytes32 _stashName, int256 _amount) returns()
func (_Contracts *ContractsTransactor) Credit(opts *bind.TransactOpts, _txRef [32]byte, _stashName [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "credit", _txRef, _stashName, _amount)
}

// Credit is a paid mutator transaction binding the contract method 0xb91f176e.
//
// Solidity: function credit(bytes32 _txRef, bytes32 _stashName, int256 _amount) returns()
func (_Contracts *ContractsSession) Credit(_txRef [32]byte, _stashName [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Credit(&_Contracts.TransactOpts, _txRef, _stashName, _amount)
}

// Credit is a paid mutator transaction binding the contract method 0xb91f176e.
//
// Solidity: function credit(bytes32 _txRef, bytes32 _stashName, int256 _amount) returns()
func (_Contracts *ContractsTransactorSession) Credit(_txRef [32]byte, _stashName [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Credit(&_Contracts.TransactOpts, _txRef, _stashName, _amount)
}

// Debit is a paid mutator transaction binding the contract method 0x4ea679e7.
//
// Solidity: function debit(bytes32 _txRef, bytes32 _stashName, int256 _amount) returns()
func (_Contracts *ContractsTransactor) Debit(opts *bind.TransactOpts, _txRef [32]byte, _stashName [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "debit", _txRef, _stashName, _amount)
}

// Debit is a paid mutator transaction binding the contract method 0x4ea679e7.
//
// Solidity: function debit(bytes32 _txRef, bytes32 _stashName, int256 _amount) returns()
func (_Contracts *ContractsSession) Debit(_txRef [32]byte, _stashName [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Debit(&_Contracts.TransactOpts, _txRef, _stashName, _amount)
}

// Debit is a paid mutator transaction binding the contract method 0x4ea679e7.
//
// Solidity: function debit(bytes32 _txRef, bytes32 _stashName, int256 _amount) returns()
func (_Contracts *ContractsTransactorSession) Debit(_txRef [32]byte, _stashName [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _Contracts.Contract.Debit(&_Contracts.TransactOpts, _txRef, _stashName, _amount)
}

// LoadStashRegistry is a paid mutator transaction binding the contract method 0x4e3d7de0.
//
// Solidity: function loadStashRegistry(bytes32 _stashName, address _stash) returns()
func (_Contracts *ContractsTransactor) LoadStashRegistry(opts *bind.TransactOpts, _stashName [32]byte, _stash common.Address) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "loadStashRegistry", _stashName, _stash)
}

// LoadStashRegistry is a paid mutator transaction binding the contract method 0x4e3d7de0.
//
// Solidity: function loadStashRegistry(bytes32 _stashName, address _stash) returns()
func (_Contracts *ContractsSession) LoadStashRegistry(_stashName [32]byte, _stash common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.LoadStashRegistry(&_Contracts.TransactOpts, _stashName, _stash)
}

// LoadStashRegistry is a paid mutator transaction binding the contract method 0x4e3d7de0.
//
// Solidity: function loadStashRegistry(bytes32 _stashName, address _stash) returns()
func (_Contracts *ContractsTransactorSession) LoadStashRegistry(_stashName [32]byte, _stash common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.LoadStashRegistry(&_Contracts.TransactOpts, _stashName, _stash)
}

// ReCreateStash is a paid mutator transaction binding the contract method 0x1e022e75.
//
// Solidity: function reCreateStash(bytes32 _stashName, int8 _typeState) returns()
func (_Contracts *ContractsTransactor) ReCreateStash(opts *bind.TransactOpts, _stashName [32]byte, _typeState int8) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "reCreateStash", _stashName, _typeState)
}

// ReCreateStash is a paid mutator transaction binding the contract method 0x1e022e75.
//
// Solidity: function reCreateStash(bytes32 _stashName, int8 _typeState) returns()
func (_Contracts *ContractsSession) ReCreateStash(_stashName [32]byte, _typeState int8) (*types.Transaction, error) {
	return _Contracts.Contract.ReCreateStash(&_Contracts.TransactOpts, _stashName, _typeState)
}

// ReCreateStash is a paid mutator transaction binding the contract method 0x1e022e75.
//
// Solidity: function reCreateStash(bytes32 _stashName, int8 _typeState) returns()
func (_Contracts *ContractsTransactorSession) ReCreateStash(_stashName [32]byte, _typeState int8) (*types.Transaction, error) {
	return _Contracts.Contract.ReCreateStash(&_Contracts.TransactOpts, _stashName, _typeState)
}

// RegisterAccETH is a paid mutator transaction binding the contract method 0xe1b8ff83.
//
// Solidity: function registerAccETH(address[] _listAcc) returns()
func (_Contracts *ContractsTransactor) RegisterAccETH(opts *bind.TransactOpts, _listAcc []common.Address) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "registerAccETH", _listAcc)
}

// RegisterAccETH is a paid mutator transaction binding the contract method 0xe1b8ff83.
//
// Solidity: function registerAccETH(address[] _listAcc) returns()
func (_Contracts *ContractsSession) RegisterAccETH(_listAcc []common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.RegisterAccETH(&_Contracts.TransactOpts, _listAcc)
}

// RegisterAccETH is a paid mutator transaction binding the contract method 0xe1b8ff83.
//
// Solidity: function registerAccETH(address[] _listAcc) returns()
func (_Contracts *ContractsTransactorSession) RegisterAccETH(_listAcc []common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.RegisterAccETH(&_Contracts.TransactOpts, _listAcc)
}

// RegisterMemberApi is a paid mutator transaction binding the contract method 0x0d3b2b6f.
//
// Solidity: function registerMemberApi(address _newMember) returns()
func (_Contracts *ContractsTransactor) RegisterMemberApi(opts *bind.TransactOpts, _newMember common.Address) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "registerMemberApi", _newMember)
}

// RegisterMemberApi is a paid mutator transaction binding the contract method 0x0d3b2b6f.
//
// Solidity: function registerMemberApi(address _newMember) returns()
func (_Contracts *ContractsSession) RegisterMemberApi(_newMember common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.RegisterMemberApi(&_Contracts.TransactOpts, _newMember)
}

// RegisterMemberApi is a paid mutator transaction binding the contract method 0x0d3b2b6f.
//
// Solidity: function registerMemberApi(address _newMember) returns()
func (_Contracts *ContractsTransactorSession) RegisterMemberApi(_newMember common.Address) (*types.Transaction, error) {
	return _Contracts.Contract.RegisterMemberApi(&_Contracts.TransactOpts, _newMember)
}

// SetState is a paid mutator transaction binding the contract method 0x8b356a4d.
//
// Solidity: function setState(bytes32 _stashName, int8 _stashState) returns()
func (_Contracts *ContractsTransactor) SetState(opts *bind.TransactOpts, _stashName [32]byte, _stashState int8) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "setState", _stashName, _stashState)
}

// SetState is a paid mutator transaction binding the contract method 0x8b356a4d.
//
// Solidity: function setState(bytes32 _stashName, int8 _stashState) returns()
func (_Contracts *ContractsSession) SetState(_stashName [32]byte, _stashState int8) (*types.Transaction, error) {
	return _Contracts.Contract.SetState(&_Contracts.TransactOpts, _stashName, _stashState)
}

// SetState is a paid mutator transaction binding the contract method 0x8b356a4d.
//
// Solidity: function setState(bytes32 _stashName, int8 _stashState) returns()
func (_Contracts *ContractsTransactorSession) SetState(_stashName [32]byte, _stashState int8) (*types.Transaction, error) {
	return _Contracts.Contract.SetState(&_Contracts.TransactOpts, _stashName, _stashState)
}

// Transfer is a paid mutator transaction binding the contract method 0xa4642866.
//
// Solidity: function transfer(bytes32 _txRef, bytes32 _sender, bytes32 _receiver, int256 _amount, string _note, int8 _txType) returns(int256 sender_bal, int256 receiver_bal)
func (_Contracts *ContractsTransactor) Transfer(opts *bind.TransactOpts, _txRef [32]byte, _sender [32]byte, _receiver [32]byte, _amount *big.Int, _note string, _txType int8) (*types.Transaction, error) {
	return _Contracts.contract.Transact(opts, "transfer", _txRef, _sender, _receiver, _amount, _note, _txType)
}

// Transfer is a paid mutator transaction binding the contract method 0xa4642866.
//
// Solidity: function transfer(bytes32 _txRef, bytes32 _sender, bytes32 _receiver, int256 _amount, string _note, int8 _txType) returns(int256 sender_bal, int256 receiver_bal)
func (_Contracts *ContractsSession) Transfer(_txRef [32]byte, _sender [32]byte, _receiver [32]byte, _amount *big.Int, _note string, _txType int8) (*types.Transaction, error) {
	return _Contracts.Contract.Transfer(&_Contracts.TransactOpts, _txRef, _sender, _receiver, _amount, _note, _txType)
}

// Transfer is a paid mutator transaction binding the contract method 0xa4642866.
//
// Solidity: function transfer(bytes32 _txRef, bytes32 _sender, bytes32 _receiver, int256 _amount, string _note, int8 _txType) returns(int256 sender_bal, int256 receiver_bal)
func (_Contracts *ContractsTransactorSession) Transfer(_txRef [32]byte, _sender [32]byte, _receiver [32]byte, _amount *big.Int, _note string, _txType int8) (*types.Transaction, error) {
	return _Contracts.Contract.Transfer(&_Contracts.TransactOpts, _txRef, _sender, _receiver, _amount, _note, _txType)
}

// ContractsEventCreateStashIterator is returned from FilterEventCreateStash and is used to iterate over the raw logs and unpacked data for EventCreateStash events raised by the Contracts contract.
type ContractsEventCreateStashIterator struct {
	Event *ContractsEventCreateStash // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsEventCreateStashIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsEventCreateStash)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsEventCreateStash)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsEventCreateStashIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsEventCreateStashIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsEventCreateStash represents a EventCreateStash event raised by the Contracts contract.
type ContractsEventCreateStash struct {
	WalletCode    [32]byte
	WalletAddress common.Address
	WalletType    int8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterEventCreateStash is a free log retrieval operation binding the contract event 0x0cb60d28f723451a1bd65a935f5e1d7b4e708818cf6cc6c30ad742fd67531b00.
//
// Solidity: event event_createStash(bytes32 indexed wallet_code, address wallet_address, int8 wallet_type)
func (_Contracts *ContractsFilterer) FilterEventCreateStash(opts *bind.FilterOpts, wallet_code [][32]byte) (*ContractsEventCreateStashIterator, error) {

	var wallet_codeRule []interface{}
	for _, wallet_codeItem := range wallet_code {
		wallet_codeRule = append(wallet_codeRule, wallet_codeItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "event_createStash", wallet_codeRule)
	if err != nil {
		return nil, err
	}
	return &ContractsEventCreateStashIterator{contract: _Contracts.contract, event: "event_createStash", logs: logs, sub: sub}, nil
}

// WatchEventCreateStash is a free log subscription operation binding the contract event 0x0cb60d28f723451a1bd65a935f5e1d7b4e708818cf6cc6c30ad742fd67531b00.
//
// Solidity: event event_createStash(bytes32 indexed wallet_code, address wallet_address, int8 wallet_type)
func (_Contracts *ContractsFilterer) WatchEventCreateStash(opts *bind.WatchOpts, sink chan<- *ContractsEventCreateStash, wallet_code [][32]byte) (event.Subscription, error) {

	var wallet_codeRule []interface{}
	for _, wallet_codeItem := range wallet_code {
		wallet_codeRule = append(wallet_codeRule, wallet_codeItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "event_createStash", wallet_codeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsEventCreateStash)
				if err := _Contracts.contract.UnpackLog(event, "event_createStash", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ContractsEventCreditIterator is returned from FilterEventCredit and is used to iterate over the raw logs and unpacked data for EventCredit events raised by the Contracts contract.
type ContractsEventCreditIterator struct {
	Event *ContractsEventCredit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsEventCreditIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsEventCredit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsEventCredit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsEventCreditIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsEventCreditIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsEventCredit represents a EventCredit event raised by the Contracts contract.
type ContractsEventCredit struct {
	TxRef      [32]byte
	WalletCode [32]byte
	Amount     *big.Int
	Timestamp  *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterEventCredit is a free log retrieval operation binding the contract event 0x2bda1f3aff897895cbea7f906b2e41ef99d39163a7b36af5782b8b718ed7e456.
//
// Solidity: event event_credit(bytes32 indexed txRef, bytes32 indexed wallet_code, int256 amount, uint256 timestamp)
func (_Contracts *ContractsFilterer) FilterEventCredit(opts *bind.FilterOpts, txRef [][32]byte, wallet_code [][32]byte) (*ContractsEventCreditIterator, error) {

	var txRefRule []interface{}
	for _, txRefItem := range txRef {
		txRefRule = append(txRefRule, txRefItem)
	}
	var wallet_codeRule []interface{}
	for _, wallet_codeItem := range wallet_code {
		wallet_codeRule = append(wallet_codeRule, wallet_codeItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "event_credit", txRefRule, wallet_codeRule)
	if err != nil {
		return nil, err
	}
	return &ContractsEventCreditIterator{contract: _Contracts.contract, event: "event_credit", logs: logs, sub: sub}, nil
}

// WatchEventCredit is a free log subscription operation binding the contract event 0x2bda1f3aff897895cbea7f906b2e41ef99d39163a7b36af5782b8b718ed7e456.
//
// Solidity: event event_credit(bytes32 indexed txRef, bytes32 indexed wallet_code, int256 amount, uint256 timestamp)
func (_Contracts *ContractsFilterer) WatchEventCredit(opts *bind.WatchOpts, sink chan<- *ContractsEventCredit, txRef [][32]byte, wallet_code [][32]byte) (event.Subscription, error) {

	var txRefRule []interface{}
	for _, txRefItem := range txRef {
		txRefRule = append(txRefRule, txRefItem)
	}
	var wallet_codeRule []interface{}
	for _, wallet_codeItem := range wallet_code {
		wallet_codeRule = append(wallet_codeRule, wallet_codeItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "event_credit", txRefRule, wallet_codeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsEventCredit)
				if err := _Contracts.contract.UnpackLog(event, "event_credit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ContractsEventDebitIterator is returned from FilterEventDebit and is used to iterate over the raw logs and unpacked data for EventDebit events raised by the Contracts contract.
type ContractsEventDebitIterator struct {
	Event *ContractsEventDebit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsEventDebitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsEventDebit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsEventDebit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsEventDebitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsEventDebitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsEventDebit represents a EventDebit event raised by the Contracts contract.
type ContractsEventDebit struct {
	TxRef      [32]byte
	WalletCode [32]byte
	Amount     *big.Int
	Timestamp  *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterEventDebit is a free log retrieval operation binding the contract event 0x3e888fb580f7ba504d1d06b6af38e430c683d120af553208a48629dbd58bb0f8.
//
// Solidity: event event_debit(bytes32 indexed txRef, bytes32 indexed wallet_code, int256 amount, uint256 timestamp)
func (_Contracts *ContractsFilterer) FilterEventDebit(opts *bind.FilterOpts, txRef [][32]byte, wallet_code [][32]byte) (*ContractsEventDebitIterator, error) {

	var txRefRule []interface{}
	for _, txRefItem := range txRef {
		txRefRule = append(txRefRule, txRefItem)
	}
	var wallet_codeRule []interface{}
	for _, wallet_codeItem := range wallet_code {
		wallet_codeRule = append(wallet_codeRule, wallet_codeItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "event_debit", txRefRule, wallet_codeRule)
	if err != nil {
		return nil, err
	}
	return &ContractsEventDebitIterator{contract: _Contracts.contract, event: "event_debit", logs: logs, sub: sub}, nil
}

// WatchEventDebit is a free log subscription operation binding the contract event 0x3e888fb580f7ba504d1d06b6af38e430c683d120af553208a48629dbd58bb0f8.
//
// Solidity: event event_debit(bytes32 indexed txRef, bytes32 indexed wallet_code, int256 amount, uint256 timestamp)
func (_Contracts *ContractsFilterer) WatchEventDebit(opts *bind.WatchOpts, sink chan<- *ContractsEventDebit, txRef [][32]byte, wallet_code [][32]byte) (event.Subscription, error) {

	var txRefRule []interface{}
	for _, txRefItem := range txRef {
		txRefRule = append(txRefRule, txRefItem)
	}
	var wallet_codeRule []interface{}
	for _, wallet_codeItem := range wallet_code {
		wallet_codeRule = append(wallet_codeRule, wallet_codeItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "event_debit", txRefRule, wallet_codeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsEventDebit)
				if err := _Contracts.contract.UnpackLog(event, "event_debit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ContractsEventReCreateStashIterator is returned from FilterEventReCreateStash and is used to iterate over the raw logs and unpacked data for EventReCreateStash events raised by the Contracts contract.
type ContractsEventReCreateStashIterator struct {
	Event *ContractsEventReCreateStash // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsEventReCreateStashIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsEventReCreateStash)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsEventReCreateStash)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsEventReCreateStashIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsEventReCreateStashIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsEventReCreateStash represents a EventReCreateStash event raised by the Contracts contract.
type ContractsEventReCreateStash struct {
	WalletCode       [32]byte
	OldWalletAddress common.Address
	NewWalletAddress common.Address
	WalletType       int8
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterEventReCreateStash is a free log retrieval operation binding the contract event 0x8c8e3419f9e71366ada9d23ae8a8dba5229a20e91deb3cab00f419ea5b0480e8.
//
// Solidity: event event_reCreateStash(bytes32 indexed wallet_code, address old_wallet_address, address new_wallet_address, int8 wallet_type)
func (_Contracts *ContractsFilterer) FilterEventReCreateStash(opts *bind.FilterOpts, wallet_code [][32]byte) (*ContractsEventReCreateStashIterator, error) {

	var wallet_codeRule []interface{}
	for _, wallet_codeItem := range wallet_code {
		wallet_codeRule = append(wallet_codeRule, wallet_codeItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "event_reCreateStash", wallet_codeRule)
	if err != nil {
		return nil, err
	}
	return &ContractsEventReCreateStashIterator{contract: _Contracts.contract, event: "event_reCreateStash", logs: logs, sub: sub}, nil
}

// WatchEventReCreateStash is a free log subscription operation binding the contract event 0x8c8e3419f9e71366ada9d23ae8a8dba5229a20e91deb3cab00f419ea5b0480e8.
//
// Solidity: event event_reCreateStash(bytes32 indexed wallet_code, address old_wallet_address, address new_wallet_address, int8 wallet_type)
func (_Contracts *ContractsFilterer) WatchEventReCreateStash(opts *bind.WatchOpts, sink chan<- *ContractsEventReCreateStash, wallet_code [][32]byte) (event.Subscription, error) {

	var wallet_codeRule []interface{}
	for _, wallet_codeItem := range wallet_code {
		wallet_codeRule = append(wallet_codeRule, wallet_codeItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "event_reCreateStash", wallet_codeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsEventReCreateStash)
				if err := _Contracts.contract.UnpackLog(event, "event_reCreateStash", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ContractsEventRegisterAccETHIterator is returned from FilterEventRegisterAccETH and is used to iterate over the raw logs and unpacked data for EventRegisterAccETH events raised by the Contracts contract.
type ContractsEventRegisterAccETHIterator struct {
	Event *ContractsEventRegisterAccETH // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsEventRegisterAccETHIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsEventRegisterAccETH)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsEventRegisterAccETH)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsEventRegisterAccETHIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsEventRegisterAccETHIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsEventRegisterAccETH represents a EventRegisterAccETH event raised by the Contracts contract.
type ContractsEventRegisterAccETH struct {
	ListAcc []common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterEventRegisterAccETH is a free log retrieval operation binding the contract event 0x3b0686a3c64982476da002e36939997a11d9ef748420920b111c3ba5d2e9784f.
//
// Solidity: event event_registerAccETH(address[] listAcc)
func (_Contracts *ContractsFilterer) FilterEventRegisterAccETH(opts *bind.FilterOpts) (*ContractsEventRegisterAccETHIterator, error) {

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "event_registerAccETH")
	if err != nil {
		return nil, err
	}
	return &ContractsEventRegisterAccETHIterator{contract: _Contracts.contract, event: "event_registerAccETH", logs: logs, sub: sub}, nil
}

// WatchEventRegisterAccETH is a free log subscription operation binding the contract event 0x3b0686a3c64982476da002e36939997a11d9ef748420920b111c3ba5d2e9784f.
//
// Solidity: event event_registerAccETH(address[] listAcc)
func (_Contracts *ContractsFilterer) WatchEventRegisterAccETH(opts *bind.WatchOpts, sink chan<- *ContractsEventRegisterAccETH) (event.Subscription, error) {

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "event_registerAccETH")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsEventRegisterAccETH)
				if err := _Contracts.contract.UnpackLog(event, "event_registerAccETH", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ContractsEventSetStateIterator is returned from FilterEventSetState and is used to iterate over the raw logs and unpacked data for EventSetState events raised by the Contracts contract.
type ContractsEventSetStateIterator struct {
	Event *ContractsEventSetState // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsEventSetStateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsEventSetState)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsEventSetState)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsEventSetStateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsEventSetStateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsEventSetState represents a EventSetState event raised by the Contracts contract.
type ContractsEventSetState struct {
	WalletCode [32]byte
	StashState int8
	OldState   *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterEventSetState is a free log retrieval operation binding the contract event 0x787d29ad64e9e02e1fb29fb54868408884d3969457c61da4943ec8d57e8ac011.
//
// Solidity: event event_setState(bytes32 indexed wallet_code, int8 stashState, int256 oldState)
func (_Contracts *ContractsFilterer) FilterEventSetState(opts *bind.FilterOpts, wallet_code [][32]byte) (*ContractsEventSetStateIterator, error) {

	var wallet_codeRule []interface{}
	for _, wallet_codeItem := range wallet_code {
		wallet_codeRule = append(wallet_codeRule, wallet_codeItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "event_setState", wallet_codeRule)
	if err != nil {
		return nil, err
	}
	return &ContractsEventSetStateIterator{contract: _Contracts.contract, event: "event_setState", logs: logs, sub: sub}, nil
}

// WatchEventSetState is a free log subscription operation binding the contract event 0x787d29ad64e9e02e1fb29fb54868408884d3969457c61da4943ec8d57e8ac011.
//
// Solidity: event event_setState(bytes32 indexed wallet_code, int8 stashState, int256 oldState)
func (_Contracts *ContractsFilterer) WatchEventSetState(opts *bind.WatchOpts, sink chan<- *ContractsEventSetState, wallet_code [][32]byte) (event.Subscription, error) {

	var wallet_codeRule []interface{}
	for _, wallet_codeItem := range wallet_code {
		wallet_codeRule = append(wallet_codeRule, wallet_codeItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "event_setState", wallet_codeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsEventSetState)
				if err := _Contracts.contract.UnpackLog(event, "event_setState", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ContractsEventTransferIterator is returned from FilterEventTransfer and is used to iterate over the raw logs and unpacked data for EventTransfer events raised by the Contracts contract.
type ContractsEventTransferIterator struct {
	Event *ContractsEventTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractsEventTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractsEventTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractsEventTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractsEventTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractsEventTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractsEventTransfer represents a EventTransfer event raised by the Contracts contract.
type ContractsEventTransfer struct {
	TxRef       [32]byte
	Sender      [32]byte
	Receiver    [32]byte
	Amount      *big.Int
	Note        string
	TxType      int8
	SenderBal   *big.Int
	ReceiverBal *big.Int
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterEventTransfer is a free log retrieval operation binding the contract event 0x20244c6c280a8d1e1be518a3fc3acb8c46f303ad98dd9ec4c01baf9e2999f82e.
//
// Solidity: event event_transfer(bytes32 indexed txRef, bytes32 indexed sender, bytes32 indexed receiver, int256 amount, string note, int8 txType, int256 sender_bal, int256 receiver_bal, uint256 timestamp)
func (_Contracts *ContractsFilterer) FilterEventTransfer(opts *bind.FilterOpts, txRef [][32]byte, sender [][32]byte, receiver [][32]byte) (*ContractsEventTransferIterator, error) {

	var txRefRule []interface{}
	for _, txRefItem := range txRef {
		txRefRule = append(txRefRule, txRefItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _Contracts.contract.FilterLogs(opts, "event_transfer", txRefRule, senderRule, receiverRule)
	if err != nil {
		return nil, err
	}
	return &ContractsEventTransferIterator{contract: _Contracts.contract, event: "event_transfer", logs: logs, sub: sub}, nil
}

// WatchEventTransfer is a free log subscription operation binding the contract event 0x20244c6c280a8d1e1be518a3fc3acb8c46f303ad98dd9ec4c01baf9e2999f82e.
//
// Solidity: event event_transfer(bytes32 indexed txRef, bytes32 indexed sender, bytes32 indexed receiver, int256 amount, string note, int8 txType, int256 sender_bal, int256 receiver_bal, uint256 timestamp)
func (_Contracts *ContractsFilterer) WatchEventTransfer(opts *bind.WatchOpts, sink chan<- *ContractsEventTransfer, txRef [][32]byte, sender [][32]byte, receiver [][32]byte) (event.Subscription, error) {

	var txRefRule []interface{}
	for _, txRefItem := range txRef {
		txRefRule = append(txRefRule, txRefItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _Contracts.contract.WatchLogs(opts, "event_transfer", txRefRule, senderRule, receiverRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractsEventTransfer)
				if err := _Contracts.contract.UnpackLog(event, "event_transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
